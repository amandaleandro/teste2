name: Docker Build & Push

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if package.json exists
        id: check_package_json
        run: |
          if [ -f "package.json" ]; then
            echo "package_json_exist=true" >> $GITHUB_ENV
          else
            echo "package_json_exist=false" >> $GITHUB_ENV
          fi

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: env.package_json_exist == 'true'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Increment Version
        if: env.package_json_exist == 'true'
        run: |
          if [ -f last_successful_version.txt ]; then
            latest_version=$(cat last_successful_version.txt)
          else
            latest_version="v0.0.0"
          fi
          echo "Latest version: $latest_version"

          IFS='.' read -r major minor patch <<< "${latest_version#v}"
          echo "Current version: major=$major, minor=$minor, patch=$patch"

          latest_commit_message=$(git log -1 --pretty=%B)
          echo "Latest commit message: $latest_commit_message"

          if [[ "$latest_commit_message" == *"BREAKING CHANGE"* ]]; then
            increment="major"
          elif [[ "$latest_commit_message" == *"feat:"* ]]; then
            increment="minor"
          else
            increment="patch"
          fi
          echo "Increment type: $increment"

          case $increment in
            major)
              new_version="v$(($major + 1)).0.0"
              ;;
            minor)
              new_version="v$major.$(($minor + 1)).0"
              ;;
            patch)
              new_version="v$major.$minor.$(($patch + 1))"
              ;;
          esac

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Remove previous latest tag
        if: env.package_json_exist == 'true'
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/nines-report"
          LATEST_TAG="${IMAGE_NAME}:latest"
          PREVIOUS_LATEST_TAG="${IMAGE_NAME}:previous-latest"

          docker pull $LATEST_TAG || exit 0
          docker tag $LATEST_TAG $PREVIOUS_LATEST_TAG
          docker push $PREVIOUS_LATEST_TAG
          docker rmi $LATEST_TAG || true

      - name: Create new tag
        if: env.package_json_exist == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Build Docker image for production
        if: env.package_json_exist == 'true'
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nines-report:${{ env.new_version }}-latest -f Dockerfile.prod .

      - name: Push Docker image for production
        if: env.package_json_exist == 'true'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/nines-report:${{ env.new_version }}-latest

      - name: Store last successful version
        if: always()
        run: echo ${{ env.new_version }} > last_successful_version.txt

      - name: Commit last successful version
        if: success() && env.package_json_exist == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add last_successful_version.txt
          git commit -m "Update last successful version to ${{ env.new_version }}"
          git push origin main

      - name: Save Docker image name
        if: success() && env.package_json_exist == 'true'
        run: echo "${{ secrets.DOCKER_USERNAME }}/nines-report:${{ env.new_version }}-latest" > docker_image_name.txt

      - name: Commit Docker image name
        if: success() && env.package_json_exist == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docker_image_name.txt
          git commit -m "Save Docker image name"
          git push origin main

      - name: Add version annotation
        if: success()
        run: |
          echo "::notice file=build.yml::Docker image built and pushed successfully!"
          echo "Version: ${{ env.new_version }}"
          echo "Docker image: ${{ secrets.DOCKER_USERNAME }}/nines-report:${{ env.new_version }}-latest"
